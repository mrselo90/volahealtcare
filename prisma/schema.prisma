generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  role           String        @default("user")
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  testimonials   Testimonial[]
}

model Service {
  id                String               @id @default(cuid())
  title             String
  slug              String               @unique
  description       String?
  categoryId        String
  featured          Boolean              @default(false)
  availability      String               @default("always")
  minAge            Int                  @default(18)
  maxAge            Int                  @default(99)
  prerequisites     String?
  aftercare         String?
  benefits          String?
  risks             String?
  anesthesia        String?
  timeInTurkey      String?
  operationTime     String?
  hospitalStay      String?
  recovery          String?
  accommodation     String?
  transportation    String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  appointments      Appointment[]
  beforeAfterCases  BeforeAfterCase[]
  beforeAfterImages BeforeAfterImage[]
  faqs              FAQ[]
  images            Image[]
  category          Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  translations      ServiceTranslation[]
  testimonials      Testimonial[]
}

model ServiceTranslation {
  id          String   @id @default(cuid())
  language    String
  title       String
  description String
  content     String?
  serviceId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, language])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  type      String   @default("gallery")
  serviceId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model BeforeAfterImage {
  id          String   @id @default(cuid())
  beforeImage String
  afterImage  String
  description String?
  serviceId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model FAQ {
  id           String           @id @default(cuid())
  question     String
  answer       String
  serviceId    String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  service      Service          @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  translations FAQTranslation[]
}

model FAQTranslation {
  id        String   @id @default(cuid())
  faqId     String
  language  String
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  faq       FAQ      @relation(fields: [faqId], references: [id], onDelete: Cascade)

  @@unique([faqId, language])
}

model Appointment {
  id            String    @id @default(cuid())
  name          String
  email         String
  phone         String
  country       String
  serviceId     String
  notes         String?
  status        String    @default("pending")
  preferredDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  service       Service   @relation(fields: [serviceId], references: [id])
}

model ChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  name      String?
  email     String?
  phone     String?
  country   String?
  content   String
  type      String   @default("user")
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
}

model Category {
  id               String            @id @default(cuid())
  name             String
  description      String?
  slug             String            @unique
  orderIndex       Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  imageUrl         String?
  beforeAfterCases BeforeAfterCase[]
  services         Service[]

  @@map("categories")
}

model Testimonial {
  id           String                   @id @default(cuid())
  userId       String?
  serviceId    String
  rating       Int
  review       String
  country      String
  photoUrl     String?
  isApproved   Boolean                  @default(false)
  isFeatured   Boolean                  @default(false)
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  service      Service                  @relation(fields: [serviceId], references: [id])
  user         User?                    @relation(fields: [userId], references: [id])
  translations TestimonialTranslation[]
}

model TestimonialTranslation {
  id            String      @id @default(cuid())
  testimonialId String
  language      String
  review        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  testimonial   Testimonial @relation(fields: [testimonialId], references: [id], onDelete: Cascade)

  @@unique([testimonialId, language])
}

model Translation {
  id           Int      @id @default(autoincrement())
  key          String
  languageCode String
  value        String
  category     String   @default("common")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([key, languageCode])
  @@index([languageCode])
  @@index([category])
}

model SiteConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Consultation {
  id                 String    @id @default(cuid())
  firstName          String
  lastName           String
  email              String
  phone              String
  country            String
  age                String?
  gender             String?
  interestedServices String
  preferredDate      DateTime?
  preferredTime      String?
  medicalHistory     String?
  currentMedications String?
  budget             String?
  additionalInfo     String?
  contactMethod      String    @default("email")
  status             String    @default("pending")
  notes              String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model BeforeAfterCase {
  id               String    @id @default(cuid())
  title            String
  patientAge       Int?
  patientGender    String?
  patientCountry   String?
  beforeImage      String
  afterImage       String
  description      String?
  treatmentDetails String?
  results          String?
  timeframe        String?
  categoryId       String?
  serviceId        String?
  isFeatured       Boolean   @default(false)
  isPublished      Boolean   @default(true)
  sortOrder        Int       @default(0)
  tags             String?
  beforeImageAlt   String?
  afterImageAlt    String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  service          Service?  @relation(fields: [serviceId], references: [id])
  category         Category? @relation(fields: [categoryId], references: [id])

  @@index([isFeatured])
  @@index([isPublished])
  @@index([categoryId])
}

model HeroSlide {
  id           String                 @id @default(cuid())
  title        String?
  subtitle     String?
  category     String?
  imageUrl     String
  videoUrl     String?                // Video URL for video slides
  mediaType    String                 @default("image") // "image" or "video"
  videoPoster  String?                // Poster image for video
  orderIndex   Int
  isActive     Boolean                @default(true)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  translations HeroSlideTranslation[]
}

model HeroSlideTranslation {
  id        String    @id @default(cuid())
  slideId   String
  language  String
  title     String?
  subtitle  String?
  category  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  slide     HeroSlide @relation(fields: [slideId], references: [id], onDelete: Cascade)

  @@unique([slideId, language])
}

model ContentBlock {
  id          String   @id @default(cuid())
  key         String   @unique // unique identifier like "experience_media"
  title       String
  content     String?  // text content
  mediaUrl    String?  // image or video URL
  mediaType   String   @default("image") // "image", "video", or "placeholder"
  mediaAlt    String?  // alt text for accessibility
  isActive    Boolean  @default(true)
  orderIndex  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
