// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  role           String        @default("user")
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  testimonials   Testimonial[]
}

model Service {
  id                String              @id @default(cuid())
  title             String
  slug              String              @unique
  description       String?
  categoryId        String
  category          Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  price             Float
  duration          String
  currency          String              @default("USD")
  featured          Boolean             @default(false)
  availability      String              @default("always")
  minAge            Int                 @default(18)
  maxAge            Int                 @default(99)
  prerequisites     String?
  aftercare         String?
  benefits          String?
  risks             String?
  translations      ServiceTranslation[]
  images            Image[]
  beforeAfterImages BeforeAfterImage[]
  beforeAfterCases  BeforeAfterCase[]
  faqs              FAQ[]
  appointments      Appointment[]
  testimonials      Testimonial[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ServiceTranslation {
  id          String   @id @default(cuid())
  language    String
  title       String
  description String
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([serviceId, language])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  type      String   @default("gallery") // 'gallery', 'before-after', or 'featured'
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BeforeAfterImage {
  id          String   @id @default(cuid())
  beforeImage String
  afterImage  String
  description String?
  serviceId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model FAQ {
  id           String           @id @default(cuid())
  question     String
  answer       String
  serviceId    String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  service      Service          @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  translations FAQTranslation[]
}

model FAQTranslation {
  id        String   @id @default(cuid())
  faqId     String
  language  String
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  faq       FAQ      @relation(fields: [faqId], references: [id], onDelete: Cascade)

  @@unique([faqId, language])
}

model Appointment {
  id            String    @id @default(cuid())
  name          String
  email         String
  phone         String
  country       String
  serviceId     String
  notes         String?
  status        String    @default("pending")
  preferredDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  service       Service   @relation(fields: [serviceId], references: [id])
}

model ChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  name      String?
  email     String?
  phone     String?
  country   String?
  content   String
  type      String   @default("user")
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    // Store as JSON string: {"en": "Category Name", "tr": "Kategori AdÄ±"}
  description String?   // Store as JSON string
  slug        String    @unique
  orderIndex  Int
  imageUrl    String?   // <-- Added for category images
  services    Service[]
  beforeAfterCases BeforeAfterCase[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Testimonial {
  id           String                   @id @default(cuid())
  userId       String?
  serviceId    String
  rating       Int
  review       String
  country      String
  videoUrl     String?
  isApproved   Boolean                  @default(false)
  isFeatured   Boolean                  @default(false)
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  service      Service                  @relation(fields: [serviceId], references: [id])
  user         User?                    @relation(fields: [userId], references: [id])
  translations TestimonialTranslation[]
}

model TestimonialTranslation {
  id            String      @id @default(cuid())
  testimonialId String
  language      String
  review        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  testimonial   Testimonial @relation(fields: [testimonialId], references: [id], onDelete: Cascade)

  @@unique([testimonialId, language])
}

model Translation {
  id           Int      @id @default(autoincrement())
  key          String
  languageCode String
  value        String
  category     String   @default("common")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([key, languageCode])
  @@index([languageCode])
  @@index([category])
}

model SiteConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Consultation {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String
  message   String
  treatment String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enhanced Before/After Gallery Management
model BeforeAfterCase {
  id              String   @id @default(cuid())
  title           String
  patientAge      Int?
  patientGender   String?  // 'male', 'female', 'other'
  patientCountry  String?
  beforeImage     String
  afterImage      String
  description     String?
  treatmentDetails String?
  results         String?
  timeframe       String?  // "3 months", "6 months", etc.
  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  serviceId       String?
  service         Service?  @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  isFeatured      Boolean  @default(false)
  isPublished     Boolean  @default(true)
  sortOrder       Int      @default(0)
  tags            String?  // JSON array of tags
  beforeImageAlt  String?
  afterImageAlt   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([isFeatured])
  @@index([isPublished])
  @@index([categoryId])
}
